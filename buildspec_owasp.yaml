version: 0.1
phases:
  build:
    commands: 
    - apt-get update
    - apt-get -y install wget
    - apt-get -y install default-jdk
    - wget https://github.com/zaproxy/zaproxy/releases/download/v2.12.0/ZAP_2.12.0_Linux.tar.gz
    - mkdir zap
    - tar -xvf ZAP_2.12.0_Linux.tar.gz
    - mkdir generated_report
    - ls
    - pwd
    - ./ZAP_2.12.0/zap.sh -help
    - ./ZAP_2.12.0/zap.sh -cmd -quickurl http://33f5-2401-4900-1c89-d2ac-1502-8ca-8ea-3ce0.ngrok.io -quickprogress -quickout ../generated_report/zap_report2.html
    - ls generated_report
    - ls
    - pwd
artifacts:
  files:
     - "**/*"
  discard-paths: no
  base-directory: generated_report/

  #looking for the work
# version: 0.2
# phases:
#   install:
#     commands:
#       - echo "install phase....."
#   pre_build:
#     commands:
#       - scanid=$(curl "localhost:8081/JSON/ascan/action/scan/?apikey=rh7jpr8lg9d6gb5ht7khru0qq9&recurse=true&inScopeOnly=&scanPolicyName=&method=&postData=&contextId=&url=https://ads.asmadiya.com" | jq -r '.scan')
#       - echo "scan id is " $scanid
#       - |
#         stat=50;
#         while [ "$stat" != 100 ]; do
#           stat=$(curl "localhost:8081/JSON/ascan/view/status/?apikey=rh7jpr8lg9d6gb5ht7khru0qq9&scanId=$scanid" | jq -r '.status');
#           echo "OWASP ZAP scan status is $stat"
#           echo "OWASP Zap analysis status is in progress...";
#           sleep 5;
#         done
#         echo "OWASP Zap analysis status is completed..."; 
#       - high_alerts=$(curl "localhost:8081/JSON/alert/view/alertsSummary/?apikey=rh7jpr8lg9d6gb5ht7khru0qq9&baseurl=https://ads.asmadiya.com" | jq -r '.alertsSummary.High')
#       - medium_alerts=$(curl "localhost:8081/JSON/alert/view/alertsSummary/?apikey=rh7jpr8lg9d6gb5ht7khru0qq9&baseurl=https://ads.asmadiya.com" | jq -r '.alertsSummary.Meduim')
#       # - echo "high alerts are $high_alerts"    
#   build:
#     commands: 
#       - curl "localhost:8081/OTHER/core/other/jsonreport/?apikey=rh7jpr8lg9d6gb5ht7khru0qq9" | jq . > zap-scan-results.json
#       - echo "build stage completed"
#   post_build:
#     commands:
#       # - | 
#       #   jq "{ \"messageType\": \"CodeScanReport\", \"reportType\": \"OWASP-Zap\", \
#       #   \"createdAt\": $(date +\"%Y-%m-%dT%H:%M:%S.%3NZ\"), \"source_repository\": env.CODEBUILD_SOURCE_REPO_URL, \
#       #   \"source_branch\": env.CODEBUILD_SOURCE_VERSION, \
#       #   \"build_id\": env.CODEBUILD_BUILD_ID, \
#       #   \"source_commitid\": env.CODEBUILD_RESOLVED_SOURCE_VERSION, \
#       #   \"report\": . }" zap-scan-results.json > payload.json
#       #   aws lambda invoke --function-name ImpToSecurityHubEKS --payload file://payload.json owaspzap_scan_report.json && echo "LAMBDA_SUCCEDED" || echo "LAMBDA_FAILED";
#       # - if [ $high_alerts != 0 ] || [ $medium_alerts != 0 ]; then echo "there are high or medium alerts.. failing the build" && exit 1; else exit 0; fi
# artifacts:
#   type: zip
#   files: '**/*'